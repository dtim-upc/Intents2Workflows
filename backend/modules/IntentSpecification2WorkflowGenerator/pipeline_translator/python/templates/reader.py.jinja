{% set ns = namespace(format="") %}
{%- for param, value in parameters %}
{%- if param|trim == 'path' %}
{%- set ns.path = value %}
{%- endif %}
{%- endfor %}
{%- set ns.format = control['format'] %}
{%- if ns.format == "CSV"%}

import csv
import pandas as pd

def {{step_name}}():
    with open("{{ns.path}}", 'r') as csvfile:
        encoding = csvfile.encoding
        lines = [csvfile.readline() for _ in range(50)]

    dialect = csv.Sniffer().sniff(''.join(lines))
    hasHeader = csv.Sniffer().has_header(''.join(lines))

    return pd.read_csv("{{ns.path}}", encoding=encoding, delimiter=dialect.delimiter)

{% elif ns.format == "Parquet" %}
import pandas as pd

def {{step_name}}():
    return pd.read_parquet("{{ns.path}}")

{% elif ns.format == "NumpyZip"%}

import numpy as np
def {{step_name}}():
    npz_data = np.load("{{ns.path}}", allow_pickle=False)
    files = npz_data.files
    return npz_data

{% elif ns.format == "Lidar_point_cloud"%}
import laspy
import pandas as pd

def {{step_name}}():
    laspy_data = laspy.read("{{ns.path}}")
    xyz = laspy_data.xyz
    xyz_df = pd.DataFrame(xyz, columns=["x", "y", "z"]) #get coordinates scaled
    points_df = pd.DataFrame(laspy_data.points.array)
    points_df = points_df.drop(columns=["X", "Y", "Z"]) #drop unscaled columns
    full_df = pd.concat([xyz_df, points_df], axis=1)
    return full_df

{% else %}
def {{step_name}}():
    print("Format {{format}} currently not supported")
    pass

{% endif %}