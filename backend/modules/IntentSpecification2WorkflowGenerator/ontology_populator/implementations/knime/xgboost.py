from common import *
from .knime_implementation import KnimeImplementation, KnimeXGBoostBundle, KnimeXGBoostFeature
from .knime_parameter import KnimeFactorParameter, KnimeTextParameter, KnimeNumericParameter, KnimeSpecificParameter
from ..simple.xgboost import xgboost_learner_implementation, xgboost_predictor_implementation
from ..core.expression import AlgebraicExpression
 
xgboost_common_parameters = [
    KnimeTextParameter('targetColumn',
                       base_parameter=next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Target Column"), None),
                       default_value="$$LABEL_CATEGORICAL$$",path='model/options'),
    KnimeSpecificParameter('weightColumn', XSD.string, None,path='model/options'),
    KnimeNumericParameter('boostingRounds', XSD.int, 
                          expression=AlgebraicExpression(cb.COPY, 
                                                         next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Boosting rounds"), None),
                                                         None),
                          default_value=100,path='model/options'),
    KnimeNumericParameter('numThreads', XSD.int, 
                          expression=AlgebraicExpression(cb.COPY, 
                                                         next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Number of threads"), None),
                                                         None),
                          default_value=4,path='model/options'),
    KnimeNumericParameter('manualNumThreads', XSD.boolean,
                          expression=AlgebraicExpression(cb.NEQ,
                                                         next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Number of threads"), None),
                                                         4),
                          default_value=False,path='model/options'),
    KnimeNumericParameter('useStaticSeed', XSD.boolean, 
                          expression=AlgebraicExpression(cb.NEQ,
                                                         next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Number of threads"), None),
                                                         0),
                          default_value=False,path='model/options'),
    KnimeNumericParameter('staticSeed', XSD.int, 
                          expression=AlgebraicExpression(cb.COPY, 
                                                         next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Random seed"), None),
                                                         None),
                          default_value=0, path='model/options'),
    KnimeNumericParameter('baseScore', XSD.double,
                          expression=AlgebraicExpression(cb.COPY, 
                                                         next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Base score"), None),
                                                         None),
                          default_value=0.5, path='model/options'),
    KnimeFactorParameter("identifier", levels={"multi:softprob":"multi:softprob","binary:logistic":"binary:logistic"},
                         base_parameter=next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Objective"), None),
                         default_value="multi:softprob", path='model/options/objective' ),
    KnimeSpecificParameter("filter-type", XSD.string, "STANDARD", path='model/options/featureFilter'),
    KnimeSpecificParameter("enforce_option", XSD.string, "EnforceInclusion", path='model/options/featureFilter'),
    KnimeTextParameter('included_names', 
                       base_parameter= next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == 'Numeric columns'), None),
                       default_value="[]", path='model/options/featureFilter', datatype=RDF.List),
    KnimeSpecificParameter('$$SKIP$$', XSD.string, None, path='model/options/featureFilter/excluded_names'),
    KnimeNumericParameter("lambda", XSD.double,
                          expression=AlgebraicExpression(cb.COPY, 
                                                         next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Lambda"), None),
                                                         None),
                          default_value=0.3,path='model/booster'),
    KnimeNumericParameter("alpha", XSD.double,  
                          expression=AlgebraicExpression(cb.COPY, 
                                                         next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Alpha"), None),
                                                         None),
                          default_value=0.3, path='model/booster'),

]

knime_xgboost_linear_learner_implementation = KnimeImplementation(
    name='KNIME XGBoost Linear Learner',
    base_implementation=xgboost_learner_implementation,
    parameters=[
        *xgboost_common_parameters,
        KnimeFactorParameter("updater", levels={'Shotgun':'Shotgun', "CoordDescent": "CoordDescent"},
                             base_parameter=next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Updater"), None),
                             default_value="CoordDescent",path='model/booster'),
        KnimeFactorParameter("featureSelector", levels={'Cyclic':'cyclic', 'Shuffle':'shuffle', 'Random':'random', 'Greedy':'greedy', 'Thrifty':'thrifty'}, 
                             base_parameter=next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Feature selector"), None),
                             default_value="Cyclic", path='model/booster'),
        KnimeNumericParameter("topK", XSD.int, 
                              expression=AlgebraicExpression(cb.COPY, 
                                                             next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Top K"), None),
                                                             None),
                              default_value=0, path='model/booster'),
    ],
    knime_node_factory='org.knime.xgboost.base.nodes.learner.classification.XGBLinearClassificationLearnerNodeFactory2',
    knime_bundle=KnimeXGBoostBundle,
    knime_feature=KnimeXGBoostFeature,
    condition=AlgebraicExpression(cb.EQ,
                                  next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Booster"), None),
                                 "linear"),
)


knime_xgboost_tree_learner_implementation = KnimeImplementation(
    name='KNIME XGBoost Tree Learner',
    base_implementation=xgboost_learner_implementation,
    parameters=[
        *xgboost_common_parameters,
        KnimeFactorParameter('booster', levels={"Tree":"tree", "Dart":"dart"}, 
                             base_parameter=next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Booster"), None),
                             default_value="Tree" , path='model/booster'),
        KnimeNumericParameter("eta", XSD.double,
                              expression=AlgebraicExpression(cb.COPY, 
                                                             next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Eta"), None),
                                                             None),
                              default_value=0.3, path='model/booster'),
        KnimeNumericParameter("gamma", XSD.double, 
                              expression=AlgebraicExpression(cb.COPY, 
                                                             next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Gamma"), None),
                                                             None),
                              default_value=0, path='model/booster'),
        KnimeNumericParameter("maxDepth", XSD.int, 
                              expression=AlgebraicExpression(cb.COPY, 
                                                             next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Max Depth"), None),
                                                             None),
                              default_value=6, path='model/booster'),
        KnimeNumericParameter("minChildWeight", XSD.double,
                              expression=AlgebraicExpression(cb.COPY, 
                                                             next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Min child weight"), None),
                                                             None), 
                              default_value=1.0, path='model/booster'),
        KnimeNumericParameter("maxDeltaStep", XSD.double, 
                              expression=AlgebraicExpression(cb.COPY, 
                                                             next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Max delta step"), None),
                                                             None),
                              default_value=0, path='model/booster'),
        KnimeNumericParameter("subsample", XSD.double,
                              expression=AlgebraicExpression(cb.COPY, 
                                                             next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Subsample"), None),
                                                             None), 
                              default_value=1.0, path='model/booster'),
        KnimeNumericParameter("colSampleByTree", XSD.double, 
                              expression=AlgebraicExpression(cb.COPY, 
                                                             next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Col sample by tree"), None),
                                                             None),
                              default_value=1.0, path='model/booster'),
        KnimeNumericParameter("colSampleByLevel", XSD.double, 
                              expression=AlgebraicExpression(cb.COPY,
                                                                next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Col sample by level"), None),
                                                                None),
                                default_value=1.0, path='model/booster'),
        KnimeNumericParameter("colSampleByNode", XSD.double, 
                              expression=AlgebraicExpression(cb.COPY,   
                                                             next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Col sample by node"), None),
                                                             None),
                                default_value=1.0, path='model/booster'),
        KnimeFactorParameter("treeMethod", levels={"Auto":"auto", "Exact":"exact", "Approx":"approx", "Hist":"hist"},
                             base_parameter=next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Tree method"), None),
                             default_value="Auto", path='model/booster'),
        KnimeNumericParameter("sketchEps", XSD.double,
                              expression=AlgebraicExpression(cb.COPY, 
                                                             next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Sketch Eps"), None),
                                                             None), 
                              default_value=0.03, path='model/booster'),
        KnimeNumericParameter("scalePosWeight", XSD.double, 
                              expression=AlgebraicExpression(cb.COPY, 
                                                             next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Scale Pos Weight"), None),
                                                             None),
                              default_value=1.0, path='model/booster'),
        KnimeFactorParameter("growPolicy", levels={"DepthWise":"depthwise", "LossGuide":"lossguide"}, 
                             base_parameter=next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Grow policy"), None),
                             default_value="DepthWise", path='model/booster'),
        KnimeNumericParameter("maxLeaves", XSD.int,
                              expression=AlgebraicExpression(cb.COPY, 
                                                                 next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Max Leaves"), None),
                                                                 None), 
                              default_value=0, path='model/booster'),
        KnimeNumericParameter("maxBin", XSD.int, 
                               expression=AlgebraicExpression(cb.COPY, 
                                                                 next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Max Bin"), None),
                                                                 None),
                              default_value=256, path='model/booster'),
        KnimeFactorParameter('sampleType', levels={'Uniform':'uniform', 'Weighted':'weighted'},
                             base_parameter=next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Sample type"), None),
                             default_value="Uniform", path='model/booster'),
        KnimeFactorParameter('normalizeType', levels={"Tree":"tree", "Forest":"forest"}, 
                             base_parameter=next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Normalize type"), None),
                             default_value="Tree", path='model/booster'),
        KnimeNumericParameter("rateDrop", XSD.double, 
                              expression=AlgebraicExpression(cb.COPY, 
                                                             next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Rate drop"), None),
                                                             None),
                              default_value=0, path='model/booster'),
        KnimeNumericParameter("oneDrop", XSD.boolean, 
                              expression=AlgebraicExpression(cb.COPY, 
                                                             next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "One drop"), None),
                                                             None),
                              default_value=False, path='model/booster'),
        KnimeNumericParameter("skipDrop", XSD.double, 
                              expression=AlgebraicExpression(cb.COPY, 
                                                             next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Skip drop"), None),
                                                             None),
                              default_value=0, path='model/booster'),
    ],
    knime_node_factory='org.knime.xgboost.base.nodes.learner.classification.XGBTreeClassificationLearnerNodeFactory2',
    knime_bundle=KnimeXGBoostBundle,
    knime_feature=KnimeXGBoostFeature,
    condition=AlgebraicExpression(cb.SUM,
                                  AlgebraicExpression(  cb.EQ,
                                                        next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Booster"), None),
                                                        "tree"),
                                  AlgebraicExpression(  cb.EQ,
                                                        next((param for param in xgboost_learner_implementation.parameters.keys() if param.label == "Booster"), None),
                                                        "dart"))
)



knime_xgboost_predictor_implementation = KnimeImplementation(
    name='KNIME XGBoost Predictor',
    base_implementation=xgboost_predictor_implementation,
    parameters=[
        KnimeSpecificParameter('predictionColumnName', XSD.string, "Prediction ($$LABEL$$)"),
        KnimeSpecificParameter('changePredictionColumnName', XSD.boolean, False),
        KnimeSpecificParameter('appendProbabilities', XSD.boolean, False),
        KnimeSpecificParameter('probabilitySuffix', XSD.string, ""),
        KnimeSpecificParameter('unknownAsMissing', XSD.boolean, False),
        KnimeSpecificParameter("batchSize", XSD.int, 10000)
    ],
    knime_node_factory='org.knime.xgboost.base.nodes.predictor.XGBClassificationPredictorNodeFactory',
    knime_bundle=KnimeXGBoostBundle,
    knime_feature=KnimeXGBoostFeature,
)
