from common import *
from ..core.expression import AlgebraicExpression
from .python_parameter import PythonNumericParameter, PythonTextParameter, PythonFactorParameter
from .python_implementation import PythonImplementation
from ..simple import xgboost

python_xgboost_learner_implementation = PythonImplementation(
    name='Python XGBoost Learner',
    baseImplementation=xgboost.xgboost_learner_implementation,
    parameters=[
        PythonTextParameter("Target",
                        base_parameter= next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == 'Target Column'),None),
                        default_value="target", control_parameter=True),
        #PythonTextParameter('numeric_columns',
        #                base_parameter=next((p for p in xgboost.xgboost_learner_implementation.parameters.keys() if p.label == 'Numeric columns'),None),
        #                default_value=None),
        PythonFactorParameter('booster', {"gbtree":"tree","gblinear":"linear",'dart':"dart"}, 
                        base_parameter=next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == 'Booster'),None),
                        default_value='gbtree'),
        PythonTextParameter("sample_weight",
                        base_parameter=next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == 'Sample weight'),None),
                        default_value=None),
        PythonNumericParameter("n_estimators", XSD.int,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == 'Boosting rounds'),None),
                                                         None),
                        default_value=100), #not sure about this correspondence
        PythonNumericParameter("n_jobs", XSD.int,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == 'Number of threads'),None),
                                                         None),
                        default_value=None),
        PythonNumericParameter("random_state", XSD.int,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == 'Random seed'),None),
                                                         None),
                        default_value=0),
        PythonNumericParameter("base_score", XSD.double,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == 'Base score'),None),
                                                         None),
                        default_value=0.5),
        PythonFactorParameter("objective", {"multi:softprob":"multi:softprob","binary:logistic":"binary:logistic"},
                            base_parameter=next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == 'Objective'),None),
                            default_value='binary:logistic'),
        PythonNumericParameter("reg_lambda", XSD.double,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == 'Lambda'),None),
                                                         None),
                        default_value=1),
        PythonNumericParameter("reg_alpha", XSD.double,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == 'Alpha'),None),
                                                         None),
                        default_value=0),
        #PythonFactorParameter("updater", ['shotgun','coord_descent'],
        #                base_parameter=next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == 'Updater'),None),
        #                default_value='shotgun'),
        PythonFactorParameter("feature_selector", {'cyclic':'cyclic', 'shuffle':'shuffle', 'random':'random', 'greedy':'greedy', 'thrifty':'thrifty'},
                        base_parameter=next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == 'Feature selector'),None),
                        default_value='cyclic'),
        PythonNumericParameter("top_k", XSD.int,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == 'Top K'),None),
                                                         None),
                        default_value=0),
        PythonNumericParameter("learning_rate", XSD.double,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == 'Eta'),None),
                                                         None),
                        default_value=0.1),
        PythonNumericParameter("gamma", XSD.double,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == 'Gamma'),None),
                                                         None),
                        default_value=0.0),
        PythonNumericParameter("max_depth", XSD.int,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == 'Max Depth'),None),
                                                         None),
                        default_value=3),
        PythonNumericParameter("min_child_weight", XSD.double,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == "Min child weight"),None),
                                                         None),
                        default_value=1.0),
        PythonNumericParameter("max_delta_step", XSD.double,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == "Max delta step"),None),
                                                         None),
                        default_value=0.0),
        PythonNumericParameter("subsample", XSD.double,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == "Subsample"),None),
                                                         None),
                        default_value=1.0),
        PythonNumericParameter("colsample_bytree", XSD.double,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == "Col sample by tree"),None),
                                                         None),
                        default_value=1.0),
        PythonNumericParameter("colsample_bylevel", XSD.double,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == "Col sample by level"),None),
                                                         None),
                        default_value=1.0),
        PythonNumericParameter("colsample_bynode", XSD.double,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == "Col sample by node"),None),
                                                         None),
                        default_value=1.0),
        PythonFactorParameter("tree_method", {'auto':'auto', 'exact':'exact', 'approx':'approx', 'hist':'hist'},
                        base_parameter=next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == 'Tree method'),None),
                        default_value='auto'),
        PythonNumericParameter("sketch_eps", XSD.double,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == "Sketch Eps"),None),
                                                         None),
                        default_value=0.03),
        PythonNumericParameter("scale_pos_weight", XSD.double,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == "Scale Pos Weight"),None),
                                                         None),
                        default_value=1.0),
        PythonFactorParameter("grow_policy", {'depthwise':'depthwise', 'lossguide':'lossguide'},
                        base_parameter=next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == 'Grow policy'),None),
                        default_value='depthwise'),                             
        PythonNumericParameter("max_leaves", XSD.int,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == "Max Leaves"),None),
                                                         None),
                        default_value=0),
        PythonNumericParameter("max_bin", XSD.int,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == "Max Bin"),None),
                                                         None),
                        default_value=256),
        PythonFactorParameter('sample_type', {'uniform':'uniform', 'weighted':'weighted'},
                        base_parameter=next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == 'Sample type'),None),
                        default_value='uniform'),
        PythonFactorParameter('normalize_type', {'tree':'tree', 'forest':'forest'},
                        base_parameter=next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == 'Normalize type'),None),
                        default_value='tree'),
        PythonNumericParameter("rate_drop", XSD.double,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == "Rate drop"),None),
                                                         None),
                        default_value=0.0),     
        PythonNumericParameter("one_drop", XSD.boolean,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == "One drop"),None),
                                                         None),
                        default_value=0),  
        PythonNumericParameter("skip_drop", XSD.double,
                        expression = AlgebraicExpression(cb.COPY,
                                                         next((param for param in xgboost.xgboost_learner_implementation.parameters.keys() if param.label == "Skip drop"),None),
                                                         None),
                        default_value=0.0)
    ],
    python_module='xgboost',
    module_version='3.0.5',
    python_function='XGBClassifier',
    template='sklearn_train'
)


python_xgboost_predictor_implementation = PythonImplementation(
    name='Python XGBoost Predictor',
    baseImplementation=xgboost.xgboost_predictor_implementation,
    parameters=[],
    python_module='xgboost',
    module_version='3.0.5',
    python_function='XGBClassifier',
    template='sklearn_predict'
)